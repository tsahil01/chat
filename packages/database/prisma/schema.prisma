generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean      @default(false)
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  Chat          Chat[]
  Document      Document[]
  Suggestion    Suggestion[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Chat {
  id          String     @id @default(uuid()) @db.Uuid
  createdAt   DateTime   @default(now())
  title       String
  userId      String
  visibility  Visibility @default(PRIVATE)
  lastContext Json? // LanguageModelV2Usage

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  messages Message[]
  votes    Vote[]
  streams  Stream[]

  @@map("Chat")
}

model Message {
  id          String   @id @default(uuid()) @db.Uuid
  chatId      String   @db.Uuid
  role        String
  parts       Json
  attachments Json
  createdAt   DateTime @default(now())

  // Relations
  chat  Chat   @relation(fields: [chatId], references: [id])
  votes Vote[]

  @@map("Message_v2")
}

model Vote {
  chatId    String  @db.Uuid
  messageId String  @db.Uuid
  isUpvoted Boolean

  // Relations
  chat    Chat    @relation(fields: [chatId], references: [id])
  message Message @relation(fields: [messageId], references: [id])

  @@id([chatId, messageId])
  @@map("Vote_v2")
}

model Document {
  id        String       @default(uuid()) @db.Uuid
  createdAt DateTime     @default(now())
  title     String
  content   String?
  kind      ArtifactKind @default(TEXT) @map("text")
  userId    String

  // Relations
  user        User         @relation(fields: [userId], references: [id])
  suggestions Suggestion[]

  @@id([id, createdAt])
  @@map("Document")
}

model Suggestion {
  id                String   @id @default(uuid()) @db.Uuid
  documentId        String   @db.Uuid
  documentCreatedAt DateTime
  originalText      String
  suggestedText     String
  description       String?
  isResolved        Boolean  @default(false)
  userId            String
  createdAt         DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id])
  document Document @relation(fields: [documentId, documentCreatedAt], references: [id, createdAt])

  @@map("Suggestion")
}

model Stream {
  id        String   @id @default(uuid()) @db.Uuid
  chatId    String   @db.Uuid
  createdAt DateTime @default(now())

  // Relations
  chat Chat @relation(fields: [chatId], references: [id])

  @@map("Stream")
}

// Enums
enum Visibility {
  PUBLIC
  PRIVATE

  @@map("visibility")
}

enum ArtifactKind {
  TEXT
  CODE
  IMAGE
  SHEET

  @@map("artifact_kind")
}
